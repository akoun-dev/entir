# SYSTÈME DE DÉTECTION DE MODULES

## OBJECTIF
Ce document explique le fonctionnement du système de détection et de chargement dynamique des modules dans notre ERP.

## ARCHITECTURE GÉNÉRALE

Le système de détection de modules permet de charger dynamiquement les fonctionnalités de l'ERP sans avoir à modifier le code principal. Chaque module est un package autonome qui peut être activé ou désactivé selon les besoins.

## PROCESSUS DE DÉTECTION

### 1. Chargement au démarrage (Boot)

- Le système parcourt le dossier `@addons` pour découvrir tous les modules disponibles
- Un script (`scripts/generateModuleRegistry.js`) analyse les dossiers et génère automatiquement le registre des modules
- Un module valide doit contenir au minimum un fichier `manifest.ts` et un fichier `index.ts`
- Le système lit et évalue chaque fichier `manifest.ts` pour extraire les métadonnées du module
- Les modules détectés sont enregistrés dans le fichier `src/core/ModuleRegistry.ts`

### 2. Chargement dynamique

- Les modules sont chargés dynamiquement au démarrage via la fonction `loadModule()`
- Chaque module est initialisé via sa fonction `initialize()` définie dans `index.ts`
- Les routes, modèles et autres fonctionnalités du module sont enregistrés dans le système

### 3. Gestion des dépendances

- Les modules peuvent déclarer des dépendances via la propriété `dependencies` dans leur manifeste
- Le système vérifie que toutes les dépendances sont disponibles avant d'activer un module
- L'ordre de chargement respecte les dépendances entre modules

### 4. Intégration avec la base de données

- Une fois détectés, les modules sont enregistrés dans la base de données
- Le système crée automatiquement les tables nécessaires pour chaque modèle défini dans les modules
- Les migrations de base de données sont exécutées au démarrage via les scripts `start.sh`, `start.bat` ou `start.js`
- Les données initiales (seeds) peuvent être chargées pour chaque module
- L'état d'activation des modules est persisté en base de données pour permettre leur activation/désactivation

## STRUCTURE D'UN MODULE

Un module doit respecter la structure suivante :

```
@addons/[nom_du_module]/
├── data/                  # Données statiques et fixtures
├── hooks/                 # Hooks React personnalisés
├── models/                # Définitions des modèles de données
├── services/              # Services et API
├── types/                 # Types TypeScript
├── views/                 # Composants d'interface utilisateur
│   ├── components/        # Composants réutilisables
│   └── pages/             # Pages complètes
├── index.ts               # Point d'entrée du module
├── manifest.ts            # Manifeste du module
└── routes.tsx             # Configuration des routes
```

## FICHIERS CLÉS

### manifest.ts
- Définit les métadonnées du module (nom, version, description)
- Spécifie les modèles de données du module
- Déclare les dépendances avec d'autres modules
- Configure les menus et les permissions

Exemple de structure:
```typescript
export default {
  name: "hr",
  version: "1.0.0",
  displayName: "Ressources Humaines",
  description: "Gestion des employés et des départements",
  dependencies: ["base"],
  models: ["hr.employee", "hr.department"],
  menus: [
    {
      id: "menu_hr_root",
      name: "Ressources Humaines",
      sequence: 10
    }
  ]
};
```

### index.ts
- Point d'entrée du module
- Exporte les fonctionnalités du module
- Contient les fonctions d'initialisation et de nettoyage

Exemple de structure:
```typescript
import manifest from './manifest';
import routes from './routes';
import * as models from './models';

// Fonction d'initialisation appelée au chargement du module
export function initialize() {
  console.log(`Module ${manifest.name} initialisé`);
  // Code d'initialisation spécifique
}

// Fonction de nettoyage appelée à la désactivation du module
export function cleanup() {
  console.log(`Module ${manifest.name} nettoyé`);
  // Code de nettoyage spécifique
}

export { manifest, routes, models };
```

### routes.tsx
- Définit les routes du module pour la navigation
- Configure les composants React associés à chaque route

Exemple de structure:
```typescript
import { RouteConfig } from 'react-router-config';
import { EmployeesView, DepartmentsView } from './views/pages';

const routes: RouteConfig[] = [
  {
    path: '/hr/employees',
    component: EmployeesView,
    exact: true
  },
  {
    path: '/hr/departments',
    component: DepartmentsView,
    exact: true
  }
];

export default routes;
```

## DÉVELOPPEMENT D'UN NOUVEAU MODULE

Pour créer un nouveau module:

1. Créer un dossier dans `addons` avec le nom du module
2. Créer les fichiers `manifest.ts` et `index.ts` avec les configurations requises
3. Développer les modèles, vues et services nécessaires
4. Exécuter `npm run generate-modules` pour mettre à jour le registre des modules
5. Redémarrer l'application pour charger le nouveau module

## INTÉGRATION AVEC LA BASE DE DONNÉES

Lorsqu'un nouveau module est détecté:

1. Le système crée automatiquement les tables correspondant aux modèles définis dans le manifeste
2. Les migrations spécifiques au module sont exécutées (si présentes dans le dossier `migrations`)
3. Les données initiales (seeds) sont chargées (si présentes dans le dossier `data`)
4. Le module est enregistré dans la table `Modules` de la base de données avec son état (actif/inactif)
5. Les utilisateurs peuvent activer/désactiver les modules via l'interface d'administration

## BONNES PRATIQUES

- Chaque module doit être autonome et ne pas dépendre du code d'autres modules sauf via les dépendances déclarées
- Utiliser des noms de modèles préfixés par le nom du module (ex: `hr.employee`)
- Documenter clairement les fonctionnalités et les API exposées par le module
- Implémenter les fonctions `initialize()` et `cleanup()` pour gérer correctement le cycle de vie du module
- Créer des migrations pour toutes les modifications de schéma de base de données
- Fournir des seeds pour les données de démonstration et de configuration